Algorithm for determining prime numbers

Let vector A=<1,1,1,1......>
A[1] means 5, A[2] means 7 - these are sequence numbers  6n±1
Recalculation: 5/3=1 index A[1], 7/3=2 index A[2]
The other way: index 1 is 3*1+2=5, indexn 2 3*2+1=7
If the index is odd, we add 2, if it is even, we add 1.
To determine prime numbers in a vector, we must mark all products of prime numbers in it as 0. 
For this purpose, let us determine all possible products:
ewen – even/pp
e-e
a1 = e*e = (3(i+2)+1)*(3(i+2)+1)=3*(3i^2+14i+49/3)  dividing by 3        a1 = 3i^2+14i+16;// integer division
a2 = (3(i+2)+1)*(3(i+4)+1)=3*(3i^2+20i+91/3) dividing by 3 a2 =  3i^2+20i+30 //integer division
r = a2-a1=6i+14
odd - odd/nn
a1 = o*o = (3(i+1)+2)*(3(i+1)+2)=9i^2+30i+25=3(3i^2+10+25/3) dividing by 3 a1=3i^2+10i+8;//integer division
a2 = (3(i+1)+2)*(3(i+3)+2)=3(3i^2+16i+55/3) dividing by 3 a2 = 3i^2+11i+18;//integer division
r = a2-a1 = 6i+10

counting similarly for odd*odd, even*odd, odd*even, even*even we receive:

even*even
a1= 3i^2+14i+16;  r = a2-a1=6i+14
odd*even
a1= 3i^2+12i+11;  r = a2-a1=6i+10
odd*odd
a1= 3i^2+10i+8;  r = a2-a1=6i+10
even*odd
a1= 3i^2+12i+11;  r = a2-a1=6i+14
These are four linear sequences determining all possible products of prime numbers. They indicate the indexes of these numbers in vector A

Based on this, I built an algorithm for determining prime numbers:

Pseudocode
FUNCTION generatePrimes(limit)
    CREATE vector A of size (limit / 3 + 1), filled with TRUE  // Assume all numbers are prime

    sqrt_limit ← FLOOR(sqrt(limit) / 3) + 1  // Compute upper bound for checking multiples

    FOR i FROM 0 TO sqrt_limit STEP 2 DO
        c ← 3 * i * i  // Common part for sequence formulas
        a1 ← c + 10 * i + 8   // Formula nn
        a2 ← c + 12 * i + 11  // Formula np
        a3 ← c + 12 * i + 11  // Formula pn (for i+1)
        a4 ← c + 14 * i + 16  // Formula pp (for i+1)
        r ← 6 * i + 10        // Step difference

        FOR a1 FROM a1 TO SIZE(A) STEP r DO
            A[a1] ← FALSE  // Mark as composite

            IF a2 < SIZE(A) THEN
                A[a2] ← FALSE
                a2 ← a2 + r
            END IF

            IF a3 < SIZE(A) THEN
                A[a3] ← FALSE
                a3 ← a3 + r + 4
            END IF

            IF a4 < SIZE(A) THEN
                A[a4] ← FALSE
                a4 ← a4 + r + 4
            END IF
        END FOR
    END FOR

    primeCount ← 2  // Include 2 and 3 as prime numbers

    FOR i FROM 1 TO SIZE(A) - 1 DO
        IF A[i] THEN
            primeCount ← primeCount + 1
        END IF
    END FOR

    PRINT "Number of prime numbers: ", primeCount
END FUNCTION

FUNCTION MAIN()
    limit ← 10^10  // Range of numbers to check
    PRINT "Range: ", limit

    start ← CURRENT_TIME()  // Start time measurement
    generatePrimes(limit)
    end ← CURRENT_TIME()  // End time measurement

    executionTime ← end - start
    PRINT "Execution time (prime number generation algorithm): ", executionTime, " seconds"
END FUNCTION

RUN MAIN()
In the tested range up to 10^10, the algorithm gives significantly better results than, for example, Atkin.
